@import '../scss';
@import '../scss/variables';

$DIRECTIONS: ('left', 'center', 'right');
$TEXT-DIRECTIONS: append($DIRECTIONS, 'justify');

@mixin text-direction-suffix-rule {
  @each $direction in $TEXT-DIRECTIONS {
    #{'._text-'+$direction} {
      text-align: $direction;
    }
  }
}


@mixin frame-ids {
  #dot-head-area,
  #dot-main-area,
  #dot-foot-area {
    @content;
  }
}

@mixin frames {
  #dot-head-area,
  #dot-main-area,
  #dot-foot-area,
  .dot-area {
    @content;
  }
}

$MINS-CLASS-PREFIX: '_mins';
$MIN-CLASS-PREFIX: '_min';
$MAXS-CLASS-PREFIX: '_maxs';
$MAX-CLASS-PREFIX: '_max';

@mixin frame-rule($options: null) {

  $sticky-resize: map-get-if($options, 'sticky-resize');
  $width-query-prefix: '.' + $MAXS-CLASS-PREFIX;


  $width-map: $DOT-LAYOUT-WIDTH-MAP;
  $width-keys: $DOT-LAYOUT-WIDTH-KEYS;
  $min-width-key: nth($width-keys, 1);
  $min-width: map-get($width-map, $min-width-key);

  $standard-width: 1000;

  #dot {
    &s {
      display: flex;
      min-height: 100%;
      flex-direction: column;
    }

    &-main {
      flex-grow: 1;
    }
  }


  @include frame-ids {
    position: relative;

  }

  @include frames {
    @include trans(width, 0.24s);
    min-width: px($min-width);
    width: auto;
    margin: 0 auto;

    &._resize {
      min-width: inherit;
      width: auto;
    }
  }


  $start-index: 0;
  $length: length($width-keys);


  // min width

  %frame-max-as-min-width {
    width: width($min-width);
  }

  #{'.' + $MAX-CLASS-PREFIX + $min-width-key} {
    @extend %frame-max-as-min-width;
  }

  $width-query: '.' + $MAXS-CLASS-PREFIX + $min-width-key;
  #{$width-query} {
    @include frames {
      @extend %frame-max-as-min-width;
    }
  }

  @each $alias, $width in $width-map {

    $start-index: $start-index + 1;

    //////////////////////////////
    // MIN WIDTH
    //////////////////////////////
    @if $width > $min-width {
      %frame-rule-min-width#{$width} {
        min-width: px($width);
      }

      #{'.' + $MIN-CLASS-PREFIX + $alias} {
        @extend %frame-rule-min-width#{$width};
      }

      @include frames {
        #{'.' + $MINS-CLASS-PREFIX + $alias} &,
          // &#{'._mn' + $alias} {
        {
          @extend %frame-rule-min-width#{$width};
        }
      }
    }


    //////////////////////////////
    // MAX WIDTH
    //////////////////////////////

    // get upper width then target
    //   1200 => 1400, 1600, 1800
    $upper-widths: list-slice($width-keys, $start-index, $length);

    // get lower width then target
    //   1200 => 1000, 768, 640
    //$lower-widths: list-slice($width-keys, 1, $start-index);

    @include mq-min($width) {
      %frame-rule-width-#{$width} {
        width: px($width);
      }


      @if $width > $min-width {
        // many times need to less 1000px widths
        //@if $width >= $standard-width {

        //@each $child-width-key in $lower-widths {
        //  %frame-rule-width-#{$width}-#{$child-width-key} {
        //    width: px(map-get($width-map, $child-width-key));
        //  }
        //}

        @each $width-key in $upper-widths {
          $width-query: '.' + $MAXS-CLASS-PREFIX + $width-key;


          #{'.' + $MAX-CLASS-PREFIX + $width-key} {
            @extend %frame-rule-width-#{$width};
          }

          // set width for default dot element
          @include frames {
            #{$width-query} &,
              // &#{$width-query} {
            {
              @extend %frame-rule-width-#{$width};
            }
          }

          //// set width for suffixes
          //#{$width-query} {
          //  // set width for lower suffixes as child
          //  @each $lower-width-key in $lower-widths {
          //    @if $width-key != $lower-width-key {
          //      $lower-width: map-get($width-map, $lower-width-key);
          //      //@if $lower-width >= $standard-width {
          //      #{$width-query-prefix + $lower-width-key} {
          //        @extend %frame-rule-width-#{$width}-#{$lower-width-key};
          //      }
          //      //}
          //    }
          //  }
          //}
        }

        //} @else {
        //  @each $width-key in $upper-widths {
        //    #{'.' + $MAX-CLASS-PREFIX + $width-key} {
        //      @extend %frame-rule-width-#{$width};
        //    }
        //  }
        //} // ignore $standard-width
      }
      // ignore $min-width

    }
  }
}

@mixin frame-theming($theme) {

  $field: -field($theme);

  #dot-main {
    background-color: $theme;
  }
}
