@import '../layout/variables';
@import './variables';

@function __layout-width-key($width) {
  $index: index($DOT-LAYOUT-WIDTH-KEYS, $width);

  // width is width-key
  @if $index {
    @return $width;
  }

  $index: index($width, $DOT-LAYOUT-WIDTHS);

  // width is width
  @if ($index) {
    @return nth($DOT-LAYOUT-WIDTH-KEYS, $index);
  }

  // find similar width
  $last-width: 0;
  $last-key: null;
  @each $layout-width-key, $layout-width in $DOT-LAYOUT-WIDTH-MAP {

    @if ($width <= $layout-width) {
      @if ($width != $layout-width) {
        @warn '#{$width} replaced as similar width';
      }
      @if ($last-width and ($width - $last-width) < ($layout-width - $width)) {
        $layout-width-key: $last-key;
      }
      @return $layout-width-key;
    }
    $last-width: $layout-width;
    $last-key: $layout-width-key;
  }

  @warn '#{$width} replaced as supported width as maximum';
  @return $DOT-LAYOUT-MAX-WIDTH-KEY;
}

@function is-layout-min-width($width) {
  @return $width == $DOT-LAYOUT-MIN-WIDTH;
}

@function __add-width-selector-suffix($query, $width) {
  $key: __layout-width-key($width);

  $width: map-get($DOT-LAYOUT-WIDTH-MAP, $key);
  @if (is-layout-min-width($width)) {
    @return $query;
  }

  $prefix: $dot-area-SELECTOR-GLUE + __layout-width-key($width);
  @return $query + $prefix;
}

@mixin grid-x-rule($options) {
  $selector: map-get($options, 'selector');

  @at-root #{$selector} {

  }
}


@mixin grid-rule-by-grid($options) {
  $selector: map-get($options, selector);
  $selector-string: map-get($options, selector-string);
  $attribute-selector: #{'[class*='+$selector-string+']'};

  $x-attribute-query: #{'[class~='+$selector-string+'-x]'};

  @include grid-x-rule($options);

  @at-root #{$selector} {

    @each $layout-width in $DOT-LAYOUT-WIDTHS {
      @include mq-min($layout-width) {

        @at-root {
          %grid-area#{$layout-width} {
            display: grid;
          }
        }

        $gap: 0;
        @while ($gap <= $DOT-GRID-GAP-TO) {
          // -gap*-at*
          $query: __add-width-selector-suffix(-gap#{$gap}, $layout-width);

          // gap*[class*=dot-grid]
          // gap* [class*=dot-grid]
          &#{$query + $attribute-selector},
          &#{$query + ' ' + $attribute-selector} {
            grid-column-gap: px($gap);
            grid-row-gap: px($gap);
          }

          // gap*[class~=dot-grid-x]
          // gap* [class~=dot-grid-x]
          $margin: px($gap / 2);
          &#{$query + $x-attribute-query},
          &#{$query + ' ' + $x-attribute-query} {
            margin: -$margin;

            > *,
            > #{$selector} {
              box-sizing: border-box;
              margin: $margin;
            }
          }
          $gap: $gap + $DOT-GRID-GAP-INCREASE;
        }

        @for $column from 1 through $DOT-GRID-COLUMN-TO {
          // *-at**
          $grid-query: __add-width-selector-suffix($column, $layout-width);


          &#{$grid-query} {
            @extend %grid-area#{$layout-width};
            grid-template-columns: repeat($column, 1fr);

          }
        }

        // grid-x
        $x-query-suffix: __add-width-selector-suffix('-x', $layout-width);
        &#{$x-query-suffix} {
          display: flex;
          flex-wrap: nowrap;

          > *,
          > #{$selector} {
            flex-grow: 1;
          }
        }
      }
    }
  }
}

@mixin grid-rule-by-flex($options) {
  $selector: map-get($options, selector);
  $selector-string: map-get($options, selector-string);
  $attribute-selector: #{'[class*='+$selector-string+']'};

  @at-root #{$selector} {
    @each $layout-width in $DOT-LAYOUT-WIDTHS {
      @include mq-min($layout-width) {
        @at-root {
          %grid-area#{$layout-width} {
            display: flex;
            flex-wrap: wrap;
          }
        }

        $gap: 0;
        @while ($gap <= $DOT-GRID-GAP-TO) {
          $query: __add-width-selector-suffix(-gap#{$gap}, $layout-width);

          $margin: px($gap / 2);

          &#{$query} {
            margin: -$margin;

            > *,
            > .dot-grid {
              box-sizing: border-box;
              // i don't know why padding, maybe for ie?
              padding: $margin;
            }
          }

          $gap: $gap + $DOT-GRID-GAP-INCREASE;
        }

        @for $column from 1 through $DOT-GRID-COLUMN-TO {
          $grid-query: __add-width-selector-suffix($column, $layout-width);

          $width: #{(100 / $column) + '%'};

          &#{$grid-query} {
            @extend %grid-area#{$layout-width};

            > *,
            > .dot-grid {
              flex: 0 0 #{$width};
              max-width: $width;
            }
          }
        }
      }
    }
  }
}

@mixin grid-rule($options:()) {
  $options: dot-rule-initiate($options, grid);

  $type: map-get-if($options, 'type', 'grid');
  @if ($type == 'grid') {
    @include grid-rule-by-grid($options);
  } @else {
    @include grid-rule-by-flex($options);
  }
}


@mixin grid-child-rule($options: ()) {
  @include grid-rule(__optimize-parent-selector($options, unquote("#{&}")));
}
