@import '../layout/variables';
@import './variables';

@function __layout-width-key($width) {
  $index: index($DOT-LAYOUT-WIDTH-KEYS, $width);

  // width is width-key
  @if $index {
    @return $width;
  }

  $index: index($width, $DOT-LAYOUT-WIDTHS);

  // width is width
  @if ($index) {
    @return nth($DOT-LAYOUT-WIDTH-KEYS, $index);
  }

  // find similar width
  $last-width: 0;
  $last-key: null;
  @each $layout-width-key, $layout-width in $DOT-LAYOUT-WIDTH-MAP {

    @if ($width <= $layout-width) {
      @if ($width != $layout-width) {
        @warn '#{$width} replaced as similar width';
      }
      @if ($last-width and ($width - $last-width) < ($layout-width - $width)) {
        $layout-width-key: $last-key;
      }
      @return $layout-width-key;
    }
    $last-width: $layout-width;
    $last-key: $layout-width-key;
  }

  @warn '#{$width} replaced as supported width as maximum';
  @return $DOT-LAYOUT-MAX-WIDTH-KEY;
}

@function is-layout-min-width($width) {
  @return $width == $DOT-LAYOUT-MIN-WIDTH;
}

@function __add-width-selector-suffix($query, $width) {
  $key: __layout-width-key($width);

  $width: map-get($DOT-LAYOUT-WIDTH-MAP, $key);
  @if (is-layout-min-width($width)) {
    @return $query;
  }

  $prefix: $dot-area-SELECTOR-GLUE + __layout-width-key($width);
  @return $query + $prefix;
}

@mixin grid-gap-child-rule($margin) {
  margin: -$margin;

  > *,
  > .dot-grid {
    box-sizing: border-box;
    // used padding when flex mode.
    margin: $margin;
  }
}

@import './grid-by-grid';
@import './grid-by-flex';


@mixin grid-rule($options:()) {
  $options: dot-rule-initiate($options, grid);

  $type: map-get-if($options, 'type', 'grid');
  @if ($type == 'grid') {
    @include grid-rule-by-grid($options);
  } @else {
    @include grid-rule-by-flex($options);
  }
}


@mixin grid-child-rule($options: ()) {
  @include grid-rule(__optimize-parent-selector($options, unquote("#{&}")));
}
