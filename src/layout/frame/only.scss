@import '../variables';
@import '../../suffixes/align';

@function layout-frame-options($options, $parent-selector: null) {
  $options: map-initiate($options, null, max-width);

  @if $parent-selector {
    $options: map-set($options, parent-selector, $parent-selector);
  }

  @return $options;
}

$__layout-sticky-resize: true;


/// generate layout frame rules
/// @todo redefine resize
@mixin layout-frame-rule($options: null) {
  $options: rule-arguments($options, max-width);

  $selector: map-get($options, selector);

  $max-width: map-get-if($options, max-width, $DOT-LAYOUT-DEFAULT-WIDTH);
  $min-width: map-get-if($options, min-width, $DOT-LAYOUT-MIN-WIDTH);

  $sticky-resize: map-get-if($options, sticky-resize, $__layout-sticky-resize);

  $parent-query: unquote("#{&}");

  @if not ends-width($selector, '-') {
    $selector: $selector + '-';
  }

  $id-selector: '#' + map-get($options, selector-string);

  $containers: #{$id-selector+'-head-area'}, #{$id-selector+'-main-area'}, #{$id-selector+'-foot-area'};

  // frame width
  @at-root {
    #{$selector+'area'},
    #{$containers} {
      min-width: px($DOT-LAYOUT-MIN-WIDTH);
      max-width: px($max-width);
      margin: 0 auto;

      @include ie610 {
        width: px($max-width);
      }

      @each $width in $DOT-LAYOUT-WIDTHS {
        @if ($sticky-resize) {
          @if ($width >= $DOT-LAYOUT-DEFAULT-WIDTH and $width <= $max-width) {
            @include mq-min($width) {
              max-width: px($width);
            }
          }
        }
      }
    }

    %frame-resize {
      max-width: inherit;
    }

    #{$selector+'resize'} {
      #{$containers} {
        @extend %frame-resize;
      }
    }

    #{$containers} {
      &#{$selector} {
        &resize {
          @extend %frame-resize;
        }
      }
    }
  }

  @at-root #{$selector} {
    &width {
      &_left {
        margin: 0;
      }

      &_right {
        margin: 0 0 auto 0;
      }
    }
  }

  @at-root #{$id-selector} {
    &-head,
    &-foot {
      &-area {
        position: relative;
      }
    }

    &-main {
      //background-color: #fff;
    }
  }

  .align {
    @include align-prefix-rule();
  }

  @include frame-stretch($id-selector+'s', $id-selector+'-main', 100vh);
}

/// generate layout frame rules as child selector
@mixin layout-frame-child-rule($options: null) {
  @include layout-frame-rule(arguments($options, max-width, (parent-selector: unquote("#{&}"))))
}