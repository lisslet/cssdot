@import './variables';

@function is-theme($target) {
  @return dot-type-of($target, 'theme');
}

@function is-theme-name($name) {
  @return map-has-key($THEME-STORE, $name);
}

@function is-palette($target) {
  @return dot-type-of($target, 'palette');
}

@function pick-theme($theme-name) {
  @if (is-theme($theme)) {
    @return $theme;
  }
  @if (is-string($theme-name)) {
    @if (is-theme-name($theme-name)) {
      @return map-get($THEME-STORE, $theme-name)
    } @else {
      @error dot-type-error('theme-name');
    }
  }
  @error dot-type-error('theme');
}

@function pick-palette($theme_or_theme-name) {
  $target: $theme_or_theme-namel;

  @if (is-string($target)) {
    $target: pick-theme($target);
  }

  @if (is-theme($target)) {
    @return map-get($theme, 'palette');
  }

  @if (is-palette($target)) {
    @return $target;
  }

  @error dot-type-error('palette');
}

/// pick color from palette or theme
@function pick($color, $map_or_labels: 'primary', $labels: null) {

  @if ($labels) {
    $map: $map_or_labels;

    @if (not is-map($map)) {
      @error map-type-error('map');
    }

    @if (not has-key($map, $labels)) {
      @debug $map;
      @error 'palette map has not #{$labels}';
    }

    $labels: map-get($map, $labels);

  } @else {
    $labels: $map_or_labels;
  }

  // primary-text => primary, text as path
  $labels: if($labels, if(is-not-list($labels), str-split($labels, '-'), $labels), 'primary');

  $length: length($labels);
  @if is-theme($color) {
    $color: map-get($color, 'palette')
  }

  @while is-map($color) {
    $label: 'primary';
    @if $length > 0 {
      $label: nth($labels, 1);
      $labels: shift($labels);
      $length: $length - 1;
    }

    $color: map-get($color, $label);
  }

  @return $color;
}

/// create theme palette
@function palette($values, $required-labels:$THEME-REQUIRED-LABELS) {
  //////////////////////////////
  // return palette

  // from theme
  @if (is-theme($values)) {
    @return map-get($values, 'palette');
  }

  // from itself
  @if (is-palette($values)) {
    @return $values;
  }

  //////////////////////////////
  // create palette

  @if is-color($values) {
    $values: (
            'primary': $values
    );
  }

  @each $required-color in $THEME-REQUIRED-LABELS {
    @if (not map-has-key($values, $required-color)) {
      @error '#{$required-color} is required color';
    }
  }

  @each $label, $fill in $THEME-AUTOFILL-MAP {
    $value: map-get-if($values, $label, null);
    @if $value == null {
      @if is-color($fill) {
        $value: $fill;
      } @else if is-string($fill) {
        $value: map-get($values, $fill);
      } @else if is-map($fill) {
        $reference: map-get-if($fill, 'reference', 'primary');
        $reference: pick($values, $reference);

        $method: map-get($fill, 'method');
        @if $method == 'text' {
          $value: if(is-safe-for-black($reference), black, white);
        } @else if $method == 'grayscale' {
          $value: grayscale($reference);
        } @else if $method == 'invert' {
          $value: invert($reference);
        } @else {
          // require amount
          $amount: map-get-if($fill, 'amount', 10%);
          @if $method == 'tint' {
            $value: tint($reference, $amount);
          } @else if ($method == 'shade') {
            $value: shade($reference, $amount);
          } @else if ($method == 'contrast') {
            $value: lighten($reference, $amount);
          }
        }
      }

      $values: map-set($values, $label, $value);
    }
  }

  $values: dot-type('palette', $values);
  @return $values;
}

@function theme($values) {
  @if is-color($values) {
    $values: palette($values);
  }

  @if is-palette($values) {
    $values: ('palette': $values);
  }

  $values: dot-type('theme', $values);
  @return $values;
}

/// get primary color of theme
@function -primary($theme) {
  @return pick($theme, 'primary')
}

/// get secondary color of theme
@function -secondary($theme){
  @return pick($theme, 'secondary');
}

/// get accent color of theme
@function -accent($theme) {
  @return pick($theme, 'accent');
}

/// get warn color of theme
@function -warn($theme) {
  @return pick($theme, 'warn');
}

/// get field color of theme
@function -field($theme) {
  @return pick($theme, 'field');
}

/// get text color of theme
@function -text($theme) {
  @return pick($theme, 'text');
}

/// get link color of theme
@function -link($theme) {
  @return pick($theme, 'link');
}
