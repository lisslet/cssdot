@import '../../src/scss';

// color variables
$primary: #448AFF;
$accent: #00838F; //#F50057;
$warn: #E91E63;
$border: null;
$link: null;
$react: null;
$active: null;

// colors to palette
$palette: palette((
        'primary': $primary,
        'accent': $accent,
        'warn': $warn,
        'border': $border,
        'link': $link,
        'react': $react,
        'active': $active,
));

$theme: theme(('palette': $palette));

/// get state suffix
/// @description
///   (a, b) => '_a;
///   (a, a) => ''
@function get-state-name($suffix, $skippable-target) {
  @return if($suffix == $skippable-target, '', '_#{$suffix}');
}

/// makes the coloring class from palette label
/// this make possible to theming without includes mixin.
/// @param $theme the map as theme type
@mixin theme-class-rule($theme) {

  $palette: palette($theme);


  .dot {

    @each $label, $color in $palette {
      @if (not dot-type($label)) {
        $border-suffix: get-state-name($label, 'border');
        $field-suffix: get-state-name($label, 'field');

        &-border#{$border-suffix} {
          border-color: $color;
        }

        @if ($label != 'border') {
          &-field#{$field-suffix} {
            background-color: $color;
          }

          &-#{$label} {
            color: $color;
          }
        }
      }
    }

  }
}

$DOT-BOX-THEME-MAP: (
        'field': 'field',
        'text': 'text',
        'react-field': 'react',
        'disable-field': 'disable'
);

@mixin box-theme($palette, $map: ()) {
  $map: map-merge($DOT-BOX-THEME-MAP, $map);

  $field: pick($palette, $map, 'field');
  $text: pick($palette, $map, 'text');
  $react-field: pick($palette, $map, 'react-field');
  $disable-field: pick($palette, $map, 'disable-field');

  .dot-box {
    background-color: $field;
    color: $text;

    &_link {
      &:hover {
        background-color: $react-field;
        color: if(is-safe-for-black($react-field), black, white);
      }
    }

    &_disable {
      &, &:hover {
        background-color: $disable-field;
        color: if(is-safe-for-black($disable-field), black, white);
      }
    }
  }
}

/// include default theme rules
/// @description
///   class-rule
@mixin theme-rule($theme) {
  @include theme-class-rule($theme);

  @include box-theme($theme);
}

@include theme-rule($theme);

@debug "1234";
//@debug -primary();
//@debug -accent();