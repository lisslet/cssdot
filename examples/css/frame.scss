// @import '../../src/frame/index';

@import '../../src/scss';
@import '../../src/scss/variables';

@mixin frames {
  #dot-head-area,
  #dot-main-area,
  #dot-foot-area,
  .dot-area {
    @content;
  }
}

@mixin frame-rule($options: null) {

  $sticky-resize: map-get-if($options, 'sticky-resize');


  #dot-head-area,
  #dot-main-area,
  #dot-foot-area {
    position: relative;
  }

  @include frames {
    width: 100%;
    min-width: 320px;
    margin: 0 auto;
    transition-property: width;
    transition-duration: 0.24s;

    &._resize {
      width: 100%;
    }
  }

  $min-width: 320;
  $first-resize: null;

  $width-map: $DOT-LAYOUT-WIDTH-MAP;
  $width-keys: $DOT-LAYOUT-WIDTH-KEYS;


  $start-index: 1;
  $length: length($width-keys);

  @each $alias, $width in $width-map {
    @if $width > $min-width {

      $widths: list-slice($width-keys, $start-index, $length);
      $lower-widths: list-slice($width-keys, 1, $start-index);

      @include mq-min($width) {

        //@if not $first-resize {
        //  @include frames {
        //    width: px($min-width);
        //    min-width: inherit;
        //    $first-resize: true;
        //  }
        //}

        %max-#{$width} {
          width: px($width);
        }

        $width-queries: ();
        @each $width-query in $widths {
          @include frames {
            &#{'._max-'+$width-query} {
              @extend %max-#{$width};
            }
          }

          //#{'._max-'+$width-query} {
          //  @include frames {
          //    @extend %max-#{$width};
          //  }
          //
          //  @each $width-query2 in $lower-widths {
          //    #{'._max-'+$width-query2} {
          //      @extend %max-#{$width};
          //    }
          //  }
          //}

        }
      }

    }
    $start-index: $start-index + 1;
  }

}


@include frame-rule();

