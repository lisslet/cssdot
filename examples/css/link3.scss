@import './theme';

/// Link Styles
$SHAPES: (
        'clear': (
                'core': (
                ),
                'normal': (
                        color: '$color',
                ),
                'focus': (
                        background-color: ('$color', '@opacity', 0.12)
                ),
                'react': (
                        background-color: ('$color', '@opacity', 0.18),
                        color: '$color'
                ),
                'active': (
                        color: '$color',
                        background-color: transparent
                )
        ),
        'soft': (
                'core': (),
                'normal': (
                        background-color: ('$color', '@opacity', 0.08),
                        color: '$color'
                ),
                'focus': (
                        background-color: ('$color', '@opacity', 0.12),
                ),
                'react': (
                        background-color: ('$color', '@opacity', 0.18)
                ),
                'active': (
                        background-color: ('$color', '@opacity', 0.08),
                )
        ),
        'hard': (
                'core': (),
                'normal': (
                        background-color: '$color',
                        color: ('$color', '@text')
                ),
                'focus': (
                        background-color: ('$color', '@opacity', 0.12),
                        color: ('$color')
                ),
                'react': (
                        background-color: ('$color', '@opacity', 0.18),
                        color: '$color'
                ),
                'active': (
                        background-color: '$color',
                        color: ('$color', '@text')
                )
        ),
        'border': (
                'core': (
                        border-style:solid,
                        border-width: 2px
                ),
                'normal': (
                        border-color: '$color',
                        color: '$color'
                ),
                'focus': (
                        border-color: ('$color', '@bright', 0.12),
                ),
                'react': (
                        background-color: ('$color', '@opacity', 0.18),
                ),
                'active': (
                        background-color: '$color',
                        color: ('$color', '@text')
                )
        ),
        'line': (
                'core': (
                        border-style: solid,
                        border-width: 0 0 2px 0,
                        border-radius: 0
                ),
                'normal': (
                        border-color: '$color',
                        color: '$color',
                ),
                'focus': (
                        border-color: ('$color', '@bright', 0.12),
                ),
                'react': (
                        color: ('$color', '@bright', 0.12),
                        border-color: ('$color', '@bright', 0.12),
                        background-color: transparent
                ),
                'active': (
                        border-color: '$color',
                        color: '$color',
                        background-color: transparent
                )
        ),
);

$DEFAULT-SHAPE: 'clear';

@function get-initialize-properties($shapes) {
  $initial-properties-set: ();

  @each $shape, $state-properties-set in $shapes {
    $initial-properties: ();

    @each $state, $state-properties in $state-properties-set {

      @each $other-shape, $other-state-properties-set in $shapes {
        @if $shape != $other-shape {

          $initial-state: ();
          @each $other-state, $other-state-properties in $other-state-properties-set {
            @if $state == $other-state {

              @each $state-property, $value in $other-state-properties {
                @if not map-has-key($state-properties, $state-property) {
                  @if not map-has-key($initial-state, $state-property) {
                    $initial-state: map-merge($initial-state, ($state-property: 'inherit'));
                  }
                }
              }
            }
          }
          $initial-properties: map-merge($initial-properties, ($state: $initial-state));
        }
      }

      $initial-properties-set: map-merge($initial-properties-set, ($shape: $initial-properties));

    }
  }
  @return $initial-properties-set;
}

$INITIALIZED-STYLES: get-initialize-properties($SHAPES);

/// String to palette color
/// @private
@function theme-replace-string($theme, $value, $default-label) {
  @if starts-with($value, '$') {
    $label: str-slice($value, 2);
    @if ($label == 'color') {
      $label: $default-label;
    }

    $color: pick($theme, $label);
    @return $color;
  }
  @return $value;
}

/// Create new color based on pallet
/// @description
///   : Method starts with `@`
///   text - safe color of palette color
///   bright - lighten color of palette color
///   opacity - transparency applied color of palette color
/// @private
@function theme-replace-list($theme, $value, $default-label) {

  // @debug $value, $default-label;

  $length: length($value);
  $color: nth($value, 1);
  $color: theme-replace-string($theme, $color, $default-label);

  $function: '@bright';
  $amount: 0.1;
  // $color, $method, $amount
  @if $length == 3 {
    $function: nth($value, 2);
    $amount: nth($value, 3);

    // $color, $function
    // OR
    // $color, $amount
  } @else if $length == 2 {
    $function-or-amount: nth($value, 2);
    // $color, (@bright), $amount
    @if type-of($function-or-amount) == 'string' {
      $function: $function-or-amount;
      // $color, $method, (0.1)
    } @else {
      $amount: $function-or-amount;
    }
  }

  // remove @
  $function: str-slice($function, 2);

  // convert amount to percent unit
  @if $amount < 2 {
    $amount: $amount * 100%;
  }

  // @debug $color, $function, $amount;

  @if $function == 'text' {
    $color: safe-color($color);
  } @else if $function == 'bright' {
    $color: lighten($color, $amount);
  } @else if $function == 'opacity' {
    $color: rgba($color, $amount);
  }

  @return $color;
}

/// Get theme value
@function theme-value($theme, $value, $default-label) {
  $type: type-of($value);
  @if $type == 'list' {
    @return theme-replace-list($theme, $value, $default-label);
  } @else if $type == 'string' {
    @return theme-replace-string($theme, $value, $default-label);
  }

  @return $value;
}

/// Set theme related property
@mixin theme-properties($theme, $label, $properties) {
  @each $property, $value in $properties {
    $value: theme-value($theme, $value, $label);
    #{$property}: $value;
  }
}

@debug "INITIALIZED-STYLES";
@debug stringify($INITIALIZED-STYLES);

@mixin link-rule() {

  .dot-link {
    // a, other
    display: inline-block;
    vertical-align: middle;

    // button
    background-color: transparent;
    border: none;
    margin: 0;
    padding: 0;


    font-size: 1rem;
    cursor: pointer;
    box-sizing: border-box;
    line-height: 36px;

    > span {
      display: inline-block;
      // min-width: 48px;
      text-align: center;
      padding-left: 0.625em;
      padding-right: 0.625em;
    }

    &:focus {
      outline: none;
    }

    @each $shape, $states in $SHAPES {
      $single-query: if($shape == $DEFAULT-SHAPE, '', #{'._' + $shape});
      $multiple-query: '_' + $shape + 's';

      &#{$multiple-query} &,
      &#{$single-query} {
        // core properties
        $core-properties: map-get($states, 'core');
        @include properties($core-properties);
      }
    }
  }
}

@mixin link-theming($theme) {
  .dot-link {
    @each $style, $states in $SHAPES {
      $single-query: if($style == $DEFAULT-SHAPE, '', #{'._' + $style});
      $multiple-query: '_' + $style + 's';
      &#{$multiple-query} &,
      &#{$single-query} {
        $link-properties: map-get($states, 'normal');
        $focus-properties: map-get($states, 'focus');
        $hover-properties: map-get($states, 'react');
        $active-properties: map-get($states, 'active');

        // coloring properties
        @each $theme-label in $THEME-THEMING-LABELS {
          $color-query: if($theme-label == 'text', '', '._'+$theme-label);

          &#{$color-query} {
            @include theme-properties($theme, $theme-label, $link-properties);

            &._focus,
            &:focus {
              @include theme-properties($theme, $theme-label, $focus-properties);
            }

            &._hover,
            &:hover {
              @include theme-properties($theme, $theme-label, $hover-properties);
            }

            &._active,
            &:active {
              @include theme-properties($theme, $theme-label, $active-properties);

              &.dot-fx-ripple {
                // background-color: map-get($hover-properties, background-color);
                // background-color: transparent;
              }
            }
          }
        }
      }
    }
  }
}


@include link-rule();
@include link-theming($theme);
