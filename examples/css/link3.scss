@import './theme';

/// Link Styles
$SHAPES: (
        'clear': (
                'core': (),
                'normal': (
                        color: '$color',
                ),
                'focus': (
                        background-color: ('$color', '@opacity', 0.06)
                ),
                'react': (
                        background-color: ('$color', '@opacity', 0.12),
                        color: '$color'
                ),
                'active': (
                        color: '$color',
                        background-color: ('$color', '@opacity', 0.24),
                )
        ),
        'soft': (
                'core': (),
                'normal': (
                        background-color: ('$color', '@opacity', 0.12),
                        color: '$color'
                ),
                'focus': (
                ),
                'react': (
                        color: ('$color', '@text'),
                        background-color: ('$color', '@opacity', 0.64)
                ),
                'active': (
                )
        ),
        'hard': (
                'core': (),
                'normal': (
                        background-color: '$color',
                        color: ('$color', '@text')
                ),
                'focus': (
                        background-color: ('$color', '@bright', 0.12),
                        color: ('$color', '@text')
                ),
                'react': (
                        background-color: ('$color', '@bright', 0.24),
                        color: ('$color', '@text')
                ),
                'active': (
                        background-color: ('$color', '@opacity', 0.1),
                        color: ('$color', '@text')
                )
        ),
        'border': (
                'core': (
                        border-style:solid,
                        border-width: 2px
                ),
                'normal': (
                        border-color: '$color',
                        color: '$color'
                ),
                'focus': (
                        border-color: ('$color', '@bright', 0.12),
                ),
                'react': (
                        border-color: ('$color', '@bright', 0.24),
                        color: '$color'
                ),
                'active': (
                        color: '$color',
                        background-color: ('$color', '@opacity', 0.1)
                )
        ),
  //'line': (
  //        'core': (
  //                border-style: solid,
  //                border-width: 0 0 2px 0,
  //                border-bottom-left-radius: 0,
  //                border-bottom-right-radius: 0
  //        ),
  //        'normal': (
  //                border-color: '$color',
  //                color: '$color',
  //        ),
  //        'focus': (
  //                border-color: ('$color', '@bright', 0.12),
  //        ),
  //        'react': (
  //                color: '$color',
  //                border-color: ('$color', '@bright', 0.24)
  //        ),
  //        'active': (
  //                color: '$color',
  //                background-color: ('$color', '@opacity', 0.1)
  //        )
  //),
);

$DEFAULT-SHAPE: 'clear';

@function get-initialize-properties($shapes) {
  $initial-properties-set: ();

  @each $shape, $state-properties-set in $shapes {
    $initial-properties: ();

    @each $state, $state-properties in $state-properties-set {

      @each $other-shape, $other-state-properties-set in $shapes {
        @if $shape != $other-shape {

          $initial-state: ();
          @each $other-state, $other-state-properties in $other-state-properties-set {
            @if $state == $other-state {

              @each $state-property, $value in $other-state-properties {
                @if not map-has-key($state-properties, $state-property) {
                  @if not map-has-key($initial-state, $state-property) {
                    $initial-state: map-merge($initial-state, ($state-property: 'inherit'));
                  }
                }
              }
            }
          }
          $initial-properties: map-merge($initial-properties, ($state: $initial-state));
        }
      }

      $initial-properties-set: map-merge($initial-properties-set, ($shape: $initial-properties));

    }
  }
  @return $initial-properties-set;
}

$INITIALIZED-STYLES: get-initialize-properties($SHAPES);

@function stringify($target, $tap: '') {
  // \A is Line breaker
  $lines: '';
  $type: type-of($target);
  @if $type == 'map' {
    $lines: #{$lines + $tap + '(\A'};
    @each $key, $value in $target {
      $lines: #{$lines + $tap + $key + ': ' + stringify($value, $tap + '  ') + '\A'};
    }
    $lines: #{$lines + $tap + ')\A'};
  } @else if ($type == 'list') {
    $lines: #{$lines + $tap + '(\A'};
    @each $value in $target {
      $lines: #{$lines + $tap + stringify($value, $tap +  '  ') + '\A'}
    }
    $lines: #{$lines + $tap + ')\A'};
  } @else {
    $lines: #{$lines + inspect($target) + '\A'};
  }
  @return $lines;
}

/// String to palette color
/// @private
@function theme-replace-string($theme, $value, $default-label) {
  @if starts-with($value, '$') {
    $label: str-slice($value, 2);
    @if ($label == 'color') {
      $label: $default-label;
    }

    $color: pick($theme, $label);
    @return $color;
  }
  @return $value;
}

/// Create new color based on pallet
/// @description
///   : Method starts with `@`
///   text - safe color of palette color
///   bright - lighten color of palette color
///   opacity - transparency applied color of palette color
/// @private
@function theme-replace-list($theme, $value, $default-label) {

  // @debug $value, $default-label;

  $length: length($value);
  $color: nth($value, 1);
  $color: theme-replace-string($theme, $color, $default-label);

  $function: '@bright';
  $amount: 0.1;
  // $color, $method, $amount
  @if $length == 3 {
    $function: nth($value, 2);
    $amount: nth($value, 3);

    // $color, $function
    // OR
    // $color, $amount
  } @else if $length == 2 {
    $function-or-amount: nth($value, 2);
    // $color, (@bright), $amount
    @if type-of($function-or-amount) == 'string' {
      $function: $function-or-amount;
      // $color, $method, (0.1)
    } @else {
      $amount: $function-or-amount;
    }
  }

  // remove @
  $function: str-slice($function, 2);

  // convert amount to percent unit
  @if $amount < 2 {
    $amount: $amount * 100%;
  }

  // @debug $color, $function, $amount;

  @if $function == 'text' {
    $color: safe-color($color);
  } @else if $function == 'bright' {
    $color: lighten($color, $amount);
  } @else if $function == 'opacity' {
    $color: rgba($color, $amount);
  }

  @return $color;
}

/// Get theme value
@function theme-value($theme, $value, $default-label) {
  $type: type-of($value);
  @if $type == 'list' {
    @return theme-replace-list($theme, $value, $default-label);
  } @else if $type == 'string' {
    @return theme-replace-string($theme, $value, $default-label);
  }

  @return $value;
}

/// Set theme related property
@mixin theme-properties($theme, $label, $properties) {
  @each $property, $value in $properties {
    $value: theme-value($theme, $value, $label);
    #{$property}: $value;
  }
}

@debug "INITIALIZED-STYLES";
@debug stringify($INITIALIZED-STYLES);

.dot-link {

  // a, other
  display: inline-block;
  vertical-align: middle;

  // button
  background-color: transparent;
  border: none;
  margin: 0;
  padding: 0;


  font-size: 1rem;
  cursor: pointer;
  box-sizing: border-box;
  border-radius: 4px;
  line-height: 36px;

  > span {
    display: inline-block;
    // min-width: 48px;
    text-align: center;
    padding-left: 0.625em;
    padding-right: 0.625em;
  }

  &:focus {
    outline: none;
  }

  @each $style, $states in $SHAPES {
    $single-query: if($style == $DEFAULT-SHAPE, '', #{'._' + $style});

    &#{'_' + $style + 's'} &,
    &#{$single-query} {
      $core-properties: map-get($states, 'core');

      $link-properties: map-get($states, 'normal');
      $focus-properties: map-get($states, 'focus');
      $hover-properties: map-get($states, 'react');
      $active-properties: map-get($states, 'active');

      // core properties
      @include properties($core-properties);

      // coloring properties
      @each $theme-label in $THEME-THEMING-LABELS {

        &#{'._'+$theme-label} {
          @include theme-properties($theme, $theme-label, $link-properties);

          &._focus,
          &:focus {
            @include theme-properties($theme, $theme-label, $focus-properties);
          }

          &._hover,
          &:hover {
            @include theme-properties($theme, $theme-label, $hover-properties);
          }

          &._active,
          &:active {
            @include theme-properties($theme, $theme-label, $active-properties);

            &.dot-fx-ripple {
              background-color: map-get($hover-properties, background-color);
            }
          }
        }
      }
    }
  }
}


.dot-fx {
  &-ripple {
    position: relative;
    overflow: hidden;

    &:before {
      content: '';
      position: absolute;
      width: 200%;
      height: 0;
      padding-bottom: 200%;
      top: 50%;
      left: 50%;
      background-color: rgba(0, 0, 0, 0.12);
      border-radius: 50%;
      display: none;
      z-index: -1;
      transform: translate(-50%, -50%);
      @include animate(0.48s both) {
        0% {
          transform: translate(-50%, -50%) scale(0);
        }

        34% {
          opacity: 1;
          // transform: translate(-50%, -50%);
        }

        100% {
          opacity: 0;
          transform: translate(-50%, -50%) scale(1);
        }

      }

    }

    &:active,
    &:focus {
      &:before {
        display: block;
      }
    }

    $labels: primary accent warn;
  }
}

@mixin fx-ripple-theming($theme) {
  $labels: primary secondary accent warn;
  .dot-fx-ripple {
    @each $label in $labels {
      $color: pick($theme, $label);
      &#{'._'+$label} {
        &:before {
          background-color: rgba(light-shade-tint($theme, $color, 20%), 0.35);
        }
      }
    }
  }
}

@include fx-ripple-theming($theme);
